; 字句解析ルーチン(エラーならばnull)
func lex(str: []char): list<[]char>
	var rg: regex@Regex
	|:: regex@makeRegex("([0-9]+\\.[0-9]+|[0-9]+|[\\+\\-\\*\\/\\(\\) ])(.*)")
	var s: []char :: str
	var res: list<[]char> :: #list<[]char>
	var match: [][]char
	; 文字列の終端に来るまでトークンのマッチを行う
	while(^s <> 0)
		do match :: rg.match(s)
		if(match =& null)
			ret null
		end if
		do res.add(match[1])
		do s :: match[2]
	end while
	; トークンのリストから空白を削除する
	do res.head()
	while(!res.term())
		if(res.get() = " ")
			do res.del()
		else
			do res.next()
		end if
	end while
	
	ret res
end func

func main()
	var tokens: list<[]char> :: @lex(cui@input())
	if(tokens =& null)
		do cui@print("エラー\n")
	else
		do tokens.head()
		while(!tokens.term())
			do cui@print(tokens.get() ~ "\n")
			do tokens.next()
		end while
	end if
end func
